{
  "_args": [
    [
      {
        "raw": "create-keyframe-animation",
        "scope": null,
        "escapedName": "create-keyframe-animation",
        "name": "create-keyframe-animation",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "F:\\vue-music\\vue-music"
    ]
  ],
  "_cnpm_publish_time": 1437163145673,
  "_from": "create-keyframe-animation",
  "_hasShrinkwrap": false,
  "_id": "create-keyframe-animation@0.1.0",
  "_location": "/create-keyframe-animation",
  "_nodeVersion": "0.12.4",
  "_npmUser": {
    "name": "henrikjoreteg",
    "email": "henrik@andyet.net"
  },
  "_npmVersion": "2.12.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "create-keyframe-animation",
    "scope": null,
    "escapedName": "create-keyframe-animation",
    "name": "create-keyframe-animation",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "http://r.cnpmjs.org/create-keyframe-animation/download/create-keyframe-animation-0.1.0.tgz",
  "_shasum": "06b8f3e08ecfb53f807eed91043e5ca1c40d5987",
  "_shrinkwrap": null,
  "_spec": "create-keyframe-animation",
  "_where": "F:\\vue-music\\vue-music",
  "author": {
    "name": "Henrik Joreteg",
    "email": "henrik@andyet.net"
  },
  "dependencies": {
    "load-styles": "^2.0.0",
    "lodash.defaults": "^3.1.2",
    "native-promisify-if-present": "^1.0.1",
    "prefixed-event": "^1.0.4",
    "transform-property": "0.0.1"
  },
  "description": "Generate CSS keyframe animations in JS",
  "devDependencies": {
    "standard": "^4.5.4",
    "tape": "^4.0.0"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "06b8f3e08ecfb53f807eed91043e5ca1c40d5987",
    "size": 5859,
    "noattachment": false,
    "tarball": "http://r.cnpmjs.org/create-keyframe-animation/download/create-keyframe-animation-0.1.0.tgz"
  },
  "gitHead": "5c148b245a3d2f0e35b5cde4f3165d1592433c4d",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "henrikjoreteg",
      "email": "henrik@andyet.net"
    }
  ],
  "name": "create-keyframe-animation",
  "optionalDependencies": {},
  "publish_time": 1437163145673,
  "readme": "# create-keyframe-animation\n\nGenerate CSS keyframe animations dynamically in the browser with JavaScript.\n\nYou describe them in JS and it generates and inserts a `<style>` in the document `<head>` with a CSS keyframe animation. \n\nThis lets you dynamically calculate values based on positions and lets you actually run the animations performantly without having to deal with or run `requestAnimationFrame` loops.\n\n** caveat ** this is experimental and I'm not entirely sure this is a good idea, nor am I sure I actually want to maintain this lib :) But I'm sharing this here because I thought it was interesting and sharing it for educational purposes. If someone wants to take this and run with it ping me on twitter: [@HenrikJoreteg](http://twitter.com/henrikjoreteg).\n\nDEMO TIME! Here's a fun thing I built with this tool: http://dot.surge.sh\n\nI'll probably write a post about this approach, I think it has some merits. Largely because `requestAnimationFrame` loops eat up battery power on mobile devices if left running and it's nice that once you've registered an animation, actually runnning it happens off of the main JS thread. Plus, as I said, you don't have to write CSS with known values ahead of time.\n\nso...\n\nNormally CSS animations are declared in a separate CSS style sheet, like so:\n\n```css\n@keyframes move {\n  0% {\n    transform: translate3d(0,0,0)\n  }\n  100% {\n    transform:translate3d(1px,1px,0)\n  }\n}\n```\n\nThis can be a bit tedious to write (even with preprocessors) and becomes difficult if you want to dynamically change those fixed pixel values when your app is running in the browser. \n\nWhat I wanted to be able to do was this:\n\n```js\nvar animations = require('create-keyframe-animation')\n\n// this creates the animation above\nanimations.registerAnimation({\n  name: 'move',\n  // the actual array of animation changes\n  animation: [\n\t[0,0], \n\t[1,1]\n  ],\n  // optional presets for when actually running the animation\n  presets: {\n    duration: 1000,\n    easing: 'linear',\n    delay: 500\n  }\n})\n\n// then run it\nanimations.runAnimation(el, 'move', function () {\n\t// callback gets called when its done\n})\n\n// it also will return a promise if a `Promise` global exists letting you easily chain animations\nanimations.runAnimation(el, 'moveUp')\n\t.then(function () {\n\t\treturn animations(el, 'wiggle')\n\t})\n\t.then(function () {\n\t\treturn animations(el, 'jiggle')\n\t})\n\t.then(function () {\n\t\treturn animations(el, 'shake')\n\t})\n\t.then(function () {\n\t\tconsole.log('done!')\n\t})\n\t.catch(function (err) {\n\t\tconsole.error(err)\n\t})\n\n```\n\nOr we can get fancy and animate other properties that are [cheap to animate](http://www.html5rocks.com/en/tutorials/speed/high-performance-animations/) like, scale and opacity.\n\n```js\nregisterAnimation('moveit', [\n\t{\n\t\ttranslate: [0, 50],\n\t\topacity: 0.5,\n\t\tscale: 2\n\t},\n\t{\n\t\ttranslate: [0, 50],\n\t\topacity: 0.5,\n\t\tscale: 2\n\t},\n\t...,\n\t...\n])\n```\n\nOr get extra fancy...\n\nThe following is an excerpt from the code in the demo:  http://dot.surge.sh/\n\nIt creates an animation of two portions, using the element's current translated position as a starting point.\n\nIt drop it vertically from its current position then bounces and spin it so it lands on the bottom left corner of the screen.\n\nThis is the code used to generate the animation for each of the 5 dots when you hit the \"X\" to bring the back to the stating position in this demo: http://dot.surge.sh/\n\n\n```javascript\nimport getPosition from 'get-css-translated-position'\nimport animations from 'create-keyframe-animation'\nimport adaptiveQuadratic from 'adaptive-quadratic-curve'\nimport ww from 'window-watcher'\n\n\nexport default function (el, name) {\n  const {x, y} = getPosition(el, {includePageOffset: true})\n  const distanceToDrop = ww.height - y\n\n  // calculate dynamic bounce in animation\n  var fullWidth = ww.width + 50\n\n  var start = [x, y]\n  var c1 = [x, distanceToDrop]\n  var middle = [x, ww.height - 50]\n  var c2 = [fullWidth * 0.22, (distanceToDrop * 0.75)]\n  var end = [20, ww.height - 70]\n\n  var points = []\n  adaptiveQuadratic(start, c1, middle, 50, points)\n  adaptiveQuadratic(middle, c2, end, 50, points)\n\n  var middle = Math.round(points.length / 2)\n\n  points = points.map(function (point, i) {\n    var rotate = 0\n    if (i) {\n      rotate = (-360 * (i / points.length))\n    }\n    if (i === (points.length - 1)) {\n      rotate = -360\n    }\n    return {\n      translate: point,\n      rotate: rotate\n    }\n  })\n\n  animations.registerAnimation({\n    name: name,\n    animation: points,\n    presets: {\n      duration: 1000,\n      easing: 'linear',\n      delay: 500\n    }\n  })\n}\n```\n\n## install\n\n```\nnpm install create-keyframe-animation\n```\n\n## basic API docs\n\n### `.registerAnimation(opts)`\n\noptions and defaults below\n\n#### opts.name string (required)\n\nThe name of the animation. This is what you use when you run it.\n\n#### opts.animation (object or array)\n\nIf you give it an object, they key is the keyframe so all the following are valid and identical:\n\n```js\nanimations.registerAnimation({\n\tname: 'move',\n\tanimation: {\n\t\tstart: [0, 0],\n\t\tend: [1, 1]\n\t}\n}\n\nanimations.registerAnimation({\n\tname: 'move',\n\tanimation: {\n\t\t0: [0, 0],\n\t\t100: [1, 1]\n\t}\n}\n\nanimations.registerAnimation({\n\tname: 'move',\n\tanimation: {\n\t\t'0%': [0, 0],\n\t\t'100%': [1, 1]\n\t}\n}\n\nanimations.registerAnimation({\n\tname: 'move',\n\t// when you give it an array the keyframe percentages are calculated\n\t// linearly based on index\n\tanimation: [[0, 0], [1, 1]]\n}\n```\n\nThe positional args are always assumed to be pixels and will be applied using `transform: translate3d()` for best performance.\n\nYou can also animate the other things that are [cheap to animate](http://www.html5rocks.com/en/tutorials/speed/high-performance-animations/). \n\n```js\nanimations.registerAnimation({\n\tname: 'moveFadeInGrow',\n\tanimation: [\n\t\t{\n\t\t\tx: 0,\n\t\t\ty: 0,\n\t\t\topacity: 0,\n\t\t\tscale: 0.5\n\t\t},\n\t\t{\n\t\t\tx: 1,\n\t\t\ty: 1,\n\t\t\topacity: 0.8,\n\t\t\tscale: 2\n\t\t}\n\t]\n}\n```\n\nOther options and their defaults\n\n```js\n{\n  duration: 1000, // duration in milliseconds\n  fillMode: 'both', // css animation fill mode property\n  easing: 'ease', // default easing\n  iterations: 1, // default number of iterations\n  delay: 0, // delay in milliseconds\n  direction: 'normal', // animation direction\n  resetWhenDone: false, // if true will apply the final animation state as a `transform` property\n  clearTransformsBeforeStart: false // whether or not to clear any existing transforms before animation starts\n}\n```\n\n### `.runAnimation(element(s), name string or options object, [callback]) `\n\nRun animation with the name specified on the nodes you pass in. \n\nReturns a promise if: `Promise` exists on the `window` object *and* you don't pass a callback.\n\n#### element (actual dom node or nodes to apply animation to)\n\nThis can be a single element, an array of elements or the result of `querySelectorAll`, jQuery should work too, but I don't use it so I haven't tested. \n\n#### name or options object\n\nIf this is a string it's assumed to be the name of the animation to run.\n\nIf you set `presets` when you registered the animation, you can run them easily: \n\n```js\nanimations.runAnimation(document.querySelectorAll('.dots'), 'wigggle')\n```\n\nIf you pass an object it has to contain the name:\n\n```js\nanimations.runAnimation(document.querySelectorAll('.dots'), {\n\tname: 'wiggle',\n\tdelay: 1500 // here we can override any of the preset options as described above\n}, function () {\n\tconsole.log('done!')\n})\n```\n\n#### callback\n\nIf you pass a callback it will get called when the `animationend` or the browser specific equivalent is called.\n\n\n## credits\n\nIf you like this follow [@HenrikJoreteg](http://twitter.com/henrikjoreteg) on twitter.\n\n## license\n\nMIT\n\n",
  "readmeFilename": "README.md",
  "scripts": {
    "test": "standard && node test/"
  },
  "version": "0.1.0"
}
